#~~~~~~~~~~~~~~~~~~ПРОСТЫЕ ЛОГИЧЕСКИЕ ВЫРАЖЕНИЕ~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~true\false`~~~~~~~~~~~~~`
#Результатами данных выражении являются true\false правд\ложь и чтобы докозать что true\faule относятся к логическим типом
#данных мы используем команду type() Например:
#print(type(True))  выдается class bool что в переводе 'логическое выражение' то же самое с False.
# и при этом в python true приравнивается к единице,а false к нолю, чтобы это проверить можно создать две переменные:
#a = True
#b = False
#print(int(a))
#print (int(b))
#мы получим 1 и 0, тоесть мы поняли что true равен к 1, а false равен к 0.
#Так же есть обратное приображение:
#print(bool(4.4)) выдает:true
#print (bool(-100)) выдает:true
#print (bool(0))    выдает:false
#print (bool(' '))  выдает:true
#print (bool(""))   выдает:false
#ВСЕ ЧТО НЕ НОЛЬ, И НЕ РАВНО К ПУСТОТЕ ЯВЛЯЕТСЯ TRUE!!!!!!
#FALSE-РАВНЯЕТСЯ К 0, (''без пробела), "", {}, none, false, set(), frozenset(),[],



#true 
#false
#print ( 4 > 3 )
#выдается true,потому что 4 выше 3 и это логически и чтобы проверить логику мы используем команду type.
#print (type( 4>3 )) 
#выдается <class 'bool'> 
#print ( 'makers' > 'bootcamp' )
#если использовать символы то оно выведит нам (true) это значит что сравнение в тексте не смотрит на количество символов,
#потому что страка bootcamp больше makers, в python есть порядковые значение поэтому чтобы узнать ее мы используем команду (ord)
#ord() функция ord от слово ordinal и она принимает только один заглавный символ. Например:
#print('makers' > 'bootcamp')
#(ord('m'))
#выдается true и каждая буква имеет порядковый юникод,например буква 'm' имеет 109 юникод и при этом порядковый юникод 
#большой буквы от маленькой бывает разной,к примеру если у маленькой буквы 'm' 109 то большой буквы 'M' 77 юникод
#Теперь чтобы докозать что makers больше bootcamp запринтим букву 'b'
#print (ord('b')) оно вывела нам юникод буквы 'b' 98, так теперь 109(m) больше 98(b) и поэтому вывели true и вывод:
#makers больше bootcamp.
#Так же в python есть функция полной противоположности ord() это функция 'chr()' от слова character-характер
# Оно с юникода дает нам букву, тоесть через нее можно найти символ. Например:
#print(chr(109)) и мы получаем букву 'm' обратите внимание что буква маленькая а для большой буквы 'М' есть свой юникод.

#~~~~~~~~~~~~~~~~~~~~ЛОГИЧЕСКИЕ ОПЕРАТОРЫ~~~~~~~~~~~~~~~~~~~~~~
#> < <= >= == !=
#> больше 
#< меньше
#>= больше или равно
#<= меньше или равно
#== равно
#!= не равно
#и нельзя путать равно с присваиванием, это присваивание =, а это равно ==.
#ПРИМЕРЫ:
#a = 10
#b = 7
#print (a + b > 15 ) #true
#так как 10+7=17 и он больше 15 ти и выдает True

#a = 10
#b = 7 
#print (a < 20 - b) #true
# так как 20-7=13 и он больше 'a" в нашем случае а-это 10 и 13 больше 10 ти

#a = 10
#b = 7
#print(a <= b + 3 ) True
# так как b это у нас 7 тоесть 7+3=10 и 10 равно 10 ти

#a = 10
#b = 7
#print(a != b) True
#так как a у нас 10 и он не равен к 7 ми (b)

#a = 10
#b = 7
#print (a == b) false
#так как у нас 10 и 7 не равны к друг другу

#а если мы за раз используем два разных знака например:
#a = 10
#b = 7
#c = a == b #false
#print (c)
# тут так как наша а и b не равны а знак присваивание запринтили нам выдается false

#~~~~~~~~~~~~~~~~~~~~~~~~СЛОЖНЫЕ ВЫРАЖЕНИЯ~~~~~~~~~~~~~~~~~~~~~
#and,or

#a = 15
#b = 25
#print(a >= 15 and b < 30) #true
#выдается true тут работает первое выражение а оно у нас a>= 15 и после второе выражение а это у нас b<30
# и так как 15 равен к 15 ти а 30 больше 25 ти в этом случае у нас все верно.

#теперь попробуем поменять места:
# а = 15
#b = 25
#print (a > 15 and b < 30) #false
#так как у нас 'a' у нас не больше 15 ти а равен, мы получили false, и изза того что первое команда выдала нам false,
# выражение на этом остонавилось и не решает второе,тоесть команда and срабатывает только тогда когда у нас обе
#команды true.
#or:
#a = 15
#b = 25
#print(a == 15 or b > 30) #true
#тут то же самое команда дала нам true исходя от первой функции a==15 и не смотря на вторую функцию.
# А чтобы мы получили false используя and\or то обе команды должны быть false.
#Например:
#a = 15
#b = 25
#print (a != 15 or b > 30) #false

#NOT
#оператор означает отрицание, его называют унарным оператором,потому что принимается только к одному 
#выражению стоящую после него, и привращает ложь в правду в правду в ложь
# НАПРИМЕР:

#x = 20
#print (not x > 10) #false
#так почему оно дало нам false если x(20) больше 10 ти и это должно быть true, все потому что команда not
#привращает true на false а false на true

#x = 20
#print (not x == 10) # true 
#точно так же с командой true

#a = True
#b = False
#print (not a ) #false
#print (not b ) #true
#тут тоже нам команда not вывела противоположность

#~~~~~~~~~~~~~~~~~~~~~~~~~~УСЛОВНЫЕ ОПЕРАТОРЫ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#if, elif, else
#эти операторы проверяют наши выражение.
#условные операторы это конструкция,которая используется для того,чтобы при разных входных данных код работал по
#разному (в зависимости от условия)

#if условия 1:
 #   тело1
        # тело1 будет выполнятся только если условия1 верно

        #if условия 1:
#            тело1
            # тело1 будет выполняться только если условия1 верно
#            else:
#                тело2
                # тело2 будет выполняться во всех других случаях


 #               if условия1:
#                    тело1
                    #тело1 будет выполняться только если условия1 верно 
 #                   elif условия2:
 #                       тело2
                        #тело2 будет выполняться только если
                        #условия1 не верное и если условия2 верное
 #                       else:
#                            тело3
                            #тело3 будет выполняться во всех других случаях

#В одной конструкции мы можем использовать только один if
#В одной конструкции мы можем использовать неограниченное количество elif или не использовать вообще
#В одной конструкции мы можем использовать только один else или вообще не использовать

#num = int(input('введите число:'))

#if num > 0:
 #   print(f'число{num} - положительное')
#elif num == 0:
    #    print(f'число{num} - это 0')
#else:
 #   print (f'число{num} - отрицательное')


#password = input ('Придумайте свой пароль: ') 
#upper_let = password[0].upper()

#if len(password) <= 8:
   # print('Ваш пароль меньше 8 символов')

   # elif not password.startswith(upper_let):
    #    print('Ваш пароль не начинается с большой буквы')

   # else 


    #~~~~~~~~~~~~~~~~~~~~~ТЕРНАРНЫЕ ОПЕРАТОРЫ~~~~~~~~~~~~~~~~~~~
    #это условия в одну строку

    #тело1 if условия else тело2
#num = int(input())

#res = 'Hello' if num == 5 else "Bye"
#print(res)


# num = 5
# "положительное if num > 0 else "отрицательное" if num > 0 else "0"


# (без тернарного)

# if num > 0 :
#     res = "положительный"
#     else:
#         if num < 0:
#             res = "отрицательный"
#             else:
#                 res num







"=====================FizzBuzz==================="
#примите число от пользователя
#выведите Fizz, если число кратно 3
#выведите Buzz, если число кратно 5
#выведите FizzBuzz, если число кратно и 3 и 5
#выведите само число во всех остальных случаях

#num = int(input())

#if num % 3 == 0: and num % 5 == 0:
#print('FizzBuzz')
#elif num % 5 == 0:
#print('Buzz')
#elif num % 3 == 0:
#print('Fizz')
# else:
# print(num)




































if условия1:
    тело1
    #
#НАПРИМЕР:

""""
if condition is True
    some code 1
 elif condition True:
    some code 3
else:
some code 2
"""
a = 20
if a >= 20:
    print('a is greater than 20')

    "~~~~~~~~~~~~~NONE Type~~~~~~~~~~~~"
    # None- неизменяемый тип данных с одним значением None,который используется для обозначение пустоты
    #например:
    #print(bool(None)) #false
    #print(bool('None')) #true










