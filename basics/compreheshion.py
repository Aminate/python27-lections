"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~COMPREHENSIONS~~~~~~~~~~~~~~~~~~~~~~~~~~~"
#генератор - с помошью. которого можно создовать последовательность используя цикл for
# list1 = []
# for i in range (1, 11):
#     list1.append(i)
#     print(list1)
    #list1 = [1,2,3,4,5,6,7,8,9,10]

# list1 = [i for i in range[1,11]]
# print(list1)
#[1,2,3,4,5,6,7,8,9,10]

#тут мы получаем то же самое но уже с сокращением,потому что обернули его в квад скопки

#во первых идет результат for элемент in последовательность 
# результат for элемент in последовательность if фильтр
# comprehension = (i for i in range(1,11))
# print(comprehension)
# <generator object <genexpr>
# генератор - итерируемый обьект который не хранит в себе полностью
# все элементы последовательности а генерируют их когда требуется

# для этого есть функция:
# next() которая принимает в себя генератор и запращивает следующий элемент у генератора и возвращает его


# list1 = [i for i in range[1,11]]
# print (next(comprehenshion))
# print (next(comprehenshion))
# print (next(comprehenshion))
# print (next(comprehenshion))





# comprehenshion = (i for i in range(1,4))
# print(list(comprehenshion)) #[1,2,3]
# print(list(comprehenshion)) #[]

#~~~~~~~~~~~~~~~~~~~~Dictionary comprehension.~~~~~~~~~~~~~~~~~~~~~
# Синтаксис dictionary comprehension выглядит так:
# my_dict = {ключ : значение for ключ in список } 


"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~СИНТАКСИЧЕСКИЙ САХАР~~~~~~~~~~~~~~~~~~~~~~~~"
#list comprehension
# list_compr = [i for i in 'hello']
# print(list_compr)
# ['h', 'e', 'l', 'l', 'o']

#dict comprehension
# dict_compr = {i:str(i)for i in range(1,11)}
# print(dict_compr)
# {1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: '10'}

#фильтр
# string = 'Hello WorlD'
# res = [i for i in string if i.islower()]
# print(res)
# ['e', 'l', 'l', 'o', 'o', 'r', 'l']

# res = []
# for i in string:
#     if i.islower():
#         res.append(i)
#         print(res)
#         ['e', 'l', 'l', 'o', 'o', 'r', 'l']

#set comprehension
# set_comp = {x for x in range(10)}
# print({1,True,'hello', 10,1})
# результат {'hello', 1, 10}
#потому что 1 ==True
# а 0 == False


# Создание первого list comprehension
# List comprehension записывается в квадратных скобках и задействует цикл for.
#  В процессе создается новый список, куда добавляются все элементы оригинального. 
#  По мере добавления элементов их можно изменять.
# Для начала возьмем простейший пример: создадим список из цифр от 1 до 5, используя функцию range().
# nums = [n for n in range(1,6)]
# print(nums)
# [1, 2, 3, 4, 5]



#создать список из чисел с 1 до 10 с четными цифрами:

# res = []
# for i in range(1,11):
#     if i % 2 == 0:
#         res.append(i)
#         print(res)

# [2, 4, 6, 8, 10]

 #второй вариант:
# res = [i for i in range(1,11) if i % 2 == 0]
# print (res)
# [2, 4, 6, 8, 10]

#третий вариант:
# res = [i for i in range(2,11,2)]
# print(res)
# [2, 4, 6, 8, 10]


#пример с не четными числами

# list1 = [i for i in range (1,11) if i % 2 > 0]
# print(list1)
# [1, 3, 5, 7, 9]

# list_ = []

# for i in range(1, 11):
#     if i % 2 > 0:
#         list_.append(i)
# print(list_)
# [1, 3, 5, 7, 9]


#ПРИМЕРЫ С ИСПОЛЬЗОВАНИЕМ (compreheshion)
#создайте числа от 1 до 10 и умножьте их
# результат:  [100,200,300,400,500,...,1000]
# range(1,11)
# res = [i*100 for i in range(1,11)]
# print(res)

#напишите hello 5 раз с помощью compreheshion:
#результат: ['hello', 'hello', 'hello', 'hello', 'hello']
# res = ['hello' for i in range(5)]
# print(res)



#создайте 3 имена и добавьте туда строку hello
#результат:
# ['Hello test1', 'Hello test2', 'Hello test3']
# users = ['test1', 'test2', 'test3']
# res = ['Hello '+name for name in users]
# res = [f'Hello {name}' for name in users]
# print(res)

#Создайте список
# [
#   [1],
#   [1,2],
#   [1,2,3],
#   [1,2,3,4],
#   [1,2,3,4,5]
# ]


#ПРИМЕР С ИСПОЛЬЗОВАНИЕМ (compreheshion):

# [[1],[1,2],[1,2,3],[1,2,3,4],[1,2,3,4,5]]
# res = [[x for x in range(1, i+1)] for i in range(1,6)]
# print(res)

#без использование

# res = []
# for i in range(1,6):
#     inner_list = []
#     for x in range(1, i+1):
#         inner_list.append(x)
#     res.append(inner_list)
# print(res)


#сделаейте из множество списков один список
#например
# list1 = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]]
# РЕЗУЛЬТАТ ДОЛЖЕН БЫТЬ res = [1,2,3,4,5,6,7,8,9,10,11,11,12]
 
# res = [i for inner_list in list1 for i in inner_list]

#БЕЗ ИСПОЛЬЗОВАНИЕ (соmpreheshion):

# res = []
# for inner_list in list1:
#     for i in inner_list:
#         res.append(i)
# print(res)


# [1,2,3,4]
# ['не четное', 'четное', 'не четное', 'четное']
#найти четное и не четное число

# res = ['четное' if i%2==0 else 'не четное' for i in range(1,7)]
# print(res)


#без использование ;(compreheshion)

# dict1 = {'a':1, 'b':2, 'c':3}
# {1:'a', 2:'b', 3:'c'}
# res = {value:key for key,value in dict1.items()}
# res = {}
# for k,v in dict1.items():
#     res.update({v:k})
     # res[v] = k








# res = {i:[x for x in range(1, i+1)] for i in range(1,6)}
# {1:[1], 2:[1,2], 3:[1,2,3], 4:[1,2,3,4], 5:[1,2,3,4,5]}

# set comprehension
# set_comprehension = {x for x in range(10)}
# print({1, True, 'hello', 10, 1})
# {1, 'hello', 10}
# 1 == True
# 0 == False


#РАЗБОР
# Синтаксис list comprehension выглядит следующим образом:
# newlist = [выражение for каждый_элемент in старый_список if условие]

# если мы хотим создать список чисел с помощью (comprenshion)
# к примеру:
# new_list = [item for item in range(1,11)] 
# print(new_list) 
#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

#теперь я создам список с помощью compr  в котором эти числа за что то отвечают,например хочу 
# вывести числа больше 20 ти  как 
#это можно сделать:
# nums = [0, 18, 33, 54, 87, 2, 13] 
# new_nums = [n for n in nums if n > 20] 
# print(new_nums) 
# [33, 54, 87]

#создайте список имен,далее создайте отфильтрованный список имен где будут содержаться
#имена начинающийся с главных букв используя comprehenshion
#например я создаю список имен ('Alica' 'Danilla' 'Emilli' 'Kanni' 'Samma')
#и хочу отфильтровать те которые начинаются с буквы (A,E,S)
#как я это делаю
# names = ['Alica', 'Danilla', 'Emilli', 'Kanni','Samma']
#далее мы начинаем фильтровать эти имена
# filtered_names = 
#но до этого мы должны создать список с какими буквами хотим фильтровать например
# list_= ['a','k','s']
#теперь начинаем писать comprehenshion
# filtered_names =[name for name in names if name[0].lower() in list_]
# print(filtered_names)
#результат
# ['Alica', 'Kanni', 'Samma']

#нам теперь нужно создать список от 1 до 10 и нужно создать множество в котором 
#поместим квадраты этих же чисел, если число делится на 2 без остатка
#а если нет то поместить в утроинное значение чисел
#для этого сначала создаем список, можем создать с помощью range
# list_ = list(range(1,11))
#далее нам не обходимо создать множество с помощью set{}
# set_ = {num ** 2 if num % 2 == 0 else num * 3 for num in list_}
#тут мы прописали если наше число делится на два без остатко то возведется в квадрат
#в противном случае умножится на 3
# print(set_)
#вывод
# {64, 3, 4, 36, 100, 9, 15, 16, 21, 27}


# РАЗБОР С ЛЕКЦИИ
# НАПРИМЕР Я ХОЧУ СОЗДАТЬ ЧИСЛА С УДВОЕННЫМИ ЧИСЛАМИ
# ЕСТЬ СПОСОБ С ФУНКЦИЕЙ for и с сокрощением с помощью comprehenshion:

#for
# list_ = []
# for num in range (1,21):
#     list_.append(num * 2)
# print(list_)
# [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]


#comprehenshion
# list_ = [num * 2 for num in range (1,21)]
# print(list_)
# [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]


#например я с помощью compre хочу создать список имен и добавить туда преложение,например
#у меня есть список моих друзей и я их хочу пригласить куда то,создаю список друзей
# list_users = ['Aidina','Aidar','Aizat','Amina']
 #и теперь пишу как я хочу пригласить/куда хочу пригласить
# invitations = ['Вы приглашены '+ name for name in list_users]
# print(invitations)
# ['Вы приглашены Aidina', 'Вы приглашены Aidar', 'Вы приглашены Aizat', 'Вы приглашены Amina']



#ПРИМЕРЫ С УСЛОВНЫМИ ОПЕРАТОРАМИ В ЛИСТ COMPR
#например я создам список с разными числами (положительные/ отрицательные не важно)
# list_ = [10, 5, -3, -4, 9, -12, 4]
#и создам еще один в котором я буду использовать лист comp list2 = []
#теперь я хочу с созданием второго списка из списка (list)добавить туда числа которые деляться на два без остатка
# list2 = [num for num in list_ if num % 2 == 0 ] #таким образам я обрашаюсь к числам из списка list
#но я хочу взять от туда числа только те которые деляться на два без остатка с помошью (if num % 2 == 0)
#(if num % 2 == 0) если число деленная на 2 без остатка 
# print(list2)
# [10, -4, -12, 4] так нам вывели числа которые делятся без остатка
#теперь я услажню задачу и хочу вывести только положительные,тогда я добавляю условия с помошью оператора
#and и num должен быть больше ноля тоесть (and num > 0)
# list_ = [10, 5, -3, -4, 9, -12, 4]
# list2 = [num for num in list_ if num % 2 == 0 and num > 0]
# print(list2)
#вывод [10, 4]
#так же можно использовать оператора or в compr

#ТЕПЕРЬ ПРИМЕР СО СТРОКАМИ
#я хочу создать список и отфлиртовать и вывести только те строки в котором есть числа
# strings =['1996', '2001г', '2023год', '1945', '1999годы']
#теперь я создаю новую переменную
# list_ = [year for year in strings if year.isdigit()]
# print(list_)
#['1996', '1945']

#Теперь попробуем создать список имен и еще один список но уже comp в котором будет 
#длина этого списка
# list_ = ['Amina','Aidina','Daniella','Cruella','Drizella']
# list_ = [len(name) for name in list_ ] (длина(имени) для имени из листа)
# print(list_)
#  ВЫВОД: [5, 6, 8, 7, 8] и нам выдается список из чисел которые показывают длину наших имен
#ТЕПЕРЬ МЫ ВИДИМ ЧТО НАШИ ИМЕНА НЕ СОСТОЯТ ИЗ БУКВ А ИЗ ЧИСЕЛ ИХ ДЛИНЫ

#ПРИМЕРЫ С (if else)
#тоже самое создадим список состоящий из отрицательных/положительных чисел
# list_ = [-1, 156, -14, 89, 11, 0] #теперь мы не будем создовать еще один список а просто будем менять его значение
#но я хочу оставить здесь те числа которые меньше ноля,а те числа которые больше ноля оставить в виде
#квадрата этих чисел
# list_ =[x if x < 0 else x ** 2 for x in list_]
# print(list_)
#[-1, 24336, -14, 7921, 121, 0]


#МЫ ТАК ЖЕ МОЖЕМ ИСПОЛЬЗОВАТЬ if else С ДОБАВЛЕНИЕМ ФИЛЬТРА НАПРИМЕР:
#например я хочу оставить те числа которые деляться на два без остатка
# list_ = [-5, -12, 0, 1, 2, 8, 4, 5, 7]
# list_ = [x if x < 0 else x ** 2 for x in list_ ] #числа для начало проходят фильтр в конце
#прописываем его в конце так как фильтр работает только так
# print(list_)
# [-5, -12, 0, 1, 4, 64, 16, 25, 49]
#значит условия сработает только тогда когда числа прошли наш фильр,например:
# list_ = [-5, -12, 0, 1, 2, 8, 4, 5, 7]
# list_ = [x if x < 0 else x ** 2 for x in list_  if x % 2 == 0]
# print(list_)
#вывод   [-12, 0, 4, 64, 16]

#ПРИМЕР В КОТОРОМ БУДЕМ СЧИТАТЬ КОЛИЧЕСТВО СИМВОЛОВ В СТРОКЕ в списке(работая с фильтром)
#names = ['amina','aidina','daniella123','john','drizella''sam43']
#тут поставим такое условия если длина имени больше или равно 5 то добавиться слово Makers с 
#большими буквами а в противном случае добавиться слово makers с маленькими буквами,как мы это
# передаем в коде: 
# filtered_names = [ x +'MAKERS' if len(x) >= 5 else x + 'makers' for x in names if x.isalpha()]
# print(filtered_names)
# вывод ['aminaMAKERS', 'aidinaMAKERS', 'johnmakers']
#почему тут у нас нету имен с цифрами потому что мы отфильтровали его

#НУЖНО ЗАПОМНИТЬ ТО ЧТО МОЖНО ЛЮБОЙ comprehenshion МОЖНО ПЕРЕПИСАТЬ НА for А НЕ КАЖДЫЙ 
# For МОЖНО ПЕРЕПИСАТЬ НА Comprehenshion. ТАКИЕ КАК elif ИЛИ БОЛЕЕ СЛОЖНЫЕ МЕТОДЫ

#ПРИМЕР С ЦИКЛАМИ 
#к примеру у нас есть инфо о пользователей, и нужно сделать статистику возраста
#тоесть разделить кому есть 18 а кому нет
# amina = {'name': 'Amina', 'age': 22}
# insan = {'name': 'Insan', 'age': 23}
# ilya = {'name': 'Ilya', 'age': 14}

# users = [amina,insan,ilya]
# ages = [user.get('age', None) for user in users]

# bigger = 0
# smaller = 0                      #это у нас счечики
# count = 0

# for age in ages:
#     if age >= 18:
#         bigger += 1
#     else:
#         smaller += 1
#     count += 1

# bigger = bigger * (100/count)
# smaller = smaller * (100/count)

# print(f'Процент пользователей с возрастом больше 18: {round(bigger)} процента')
# print(f'Процент пользователей с возрастом меньше 18: {round(smaller)} процента')

#Вывод:
# Процент пользователей с возрастом больше 18: 67 процента
#Процент пользователей с возрастом меньше 18: 33 процента


#вложенный лист compr с матрицами
#ПРИМЕР
#создадим список внутри которого будет хранится трехмерная матрица:
# matrix = [
#     [0, 2, 5, 6],
#     [7, 3, 0, 7],
#     [5, 7, 1, 6]
# ]

#и теперь его нужно распоковать это сделаем с помощью- ucompress
#ucompress = [n for row in matrix for n in row]
#print(ucompress) и если мы запринтим то действительно вышел один список в котором все три матрицы
#[0, 2, 5, 6, 7, 3, 0, 7, 5, 7, 1, 6]

#теперь пример с использованием с стандартной библиотекой python
# from datetime import datetime
#например создадим список с числами от 0 до 100.000
#с начало попробуем с циклом/потом с лист compr
#                                 1 пример с помощью цикла
# from datetime import datetime
# start = datetime.now()
# print(start) С ПОМОЩЬЮ ДАННОЙ КОМАНДЫ МОЖНО УЗНАТЬ ДАННОЕ ВРЕМЯ/ДАТУ
#вывод     2023-02-14 22:11:49.464621

# from datetime import datetime
# start = datetime.now()
# list_ =[]
# for i in range(100000):
#     list_.append(i)
# print(datetime.now() - start)
#вывод  0:00:00.006942. вот столько времени ушло на создание такого списка


                        # 2 пример с compre
# from datetime import datetime
# start = datetime.now()
# list_ = [i for i in range(100000)]
# print(datetime.now() - start)
# вывод  0:00:00.001569 а вот сколько времени ушло с помошью compr

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~DICTIONARY comprehension~~~~~~~~~~~~~~~~~~~~~~~
#например меняем ключи с местами
# dict_abc = {'a': 1, 'b': 2, 'c': 3}
# dict_123 = {value: key for key, value in dict_abc.items()}
#print(dict_123)        #вывод {1: 'a', 2: 'b', 3: 'c'}

#теперь попробуем с этим же примером чтобы значение каждого ключа умножилась на два
# dict_abc = {'a': 1, 'b': 2, 'c': 3}
# dict_123 = {key: value + 2 for key, value in dict_abc.items()}
# print(dict_123)  #{'a': 3, 'b': 4, 'c': 5} вот так и мы поменяли,точнее увеличили значение на два

#теперь с этим же примером попробуем наши ключи сделать заглавными
# dict_abc = {'a': 1, 'b': 2, 'c': 3}
# dict_123 = {key.upper(): value + 2 for key, value in dict_abc.items()}
# print(dict_123) #вывод      {'A': 3, 'B': 4, 'C': 5}

#теперь по сложнее попробуем использовать условия с этим же примером но добавим туда отрицательными значениями
#в этом примере для начало отфильтруем,оставим только те ключи в котором значение положительное число,
#и изменим наш ключ на заглавную букву,а значения возведем в степень три все это
#  с помощью созданием нового словаря
# dict_abc = {'a': 1, 'b': 2, 'c': 3, 'd': -4, 'e': -7}
# new_dict = {key.upper(): value ** 3 for key, value in dict_abc.items() if value > 0}
# print(new_dict) #вывод {'A': 1, 'B': 8, 'C': 27}
#Здесь у нас ключи стали с большими буквами,значение умножились на три раза,отсеились те ключи у которых были
#значение отрицательными

                       #так же мы можем создавать вложенные словари
#например у нас есть словарь с фруктами и овощами в котором мы назначили им цену,но они у нас подорожали
#скажем подоражали на 3 сома. Теперь нам нужно к каждому значению прибавить 3
# a = {
#     'fruits':
#     {'apple': 100, 'orange': 60},
#     'vegetables':
#     {'cucumber': 28, 'tomato': 63}
# }
# b = {key:{inner_k: inner_v + 3 for inner_k, inner_v in value.items()} for key, value in a.items()}
# print(b)  #вывод {'fruits': {'apple': 103, 'orange': 63}, 'vegetables': {'cucumber': 31, 'tomato': 66}}


#~~~~~~~~~~~~~~~~~~         СЕТ compr            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

